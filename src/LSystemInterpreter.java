/**
 * @author Duncan Grubbs
 * @date 2020-01-30
 * @license MIT
 */

import java.util.Stack;

public class LSystemInterpreter {
    private int x;
    private double alpha;
    private Turtle turtle;

    /**
     * Visual Interpreter for strings generated by
     * L-Systems.
     *
     * This system can interpret +, -, [, ], and F.
     * @param x Amount each F moves Turtle forward
     * @param alpha Angle each + and minus moves turtle
     */
    public LSystemInterpreter(int x, double alpha) {
        this.x = x;
        this.alpha = alpha;

        // create our turtle and set some basic properties
        // for a better graphics experience
        this.turtle = new Turtle();
        this.turtle.up();
        this.turtle.setPosition(0, -400, 90);
        this.turtle.down();
        this.turtle.speed(0);
        this.turtle.penColor("olivedrab");
        this.turtle.hide();
    }

    /**
     * Visually interprets a string generated by the L-System
     * by using Turtle graphics to draw a system.
     * @param procedure String to be interpreted.
     */
    public void interpret(String procedure) {
        // create our stack
        Stack<TurtleState> states = new Stack<>();

        // for every character in the string, interpret it
        for (int i = 0; i < procedure.length(); i++) {
            char currChar = procedure.charAt(i);

            /*
                There are five characters handled by this interpreter,
                F, +, -, [, and ]
                Each character has its own case in the switch statement,
                adjusting the turtle's position to match the command of
                the character. If there is an invalid character in
                the generated string, the default is to ignore it and
                move on.
             */
            switch (currChar) {
                case 'F':
                    this.turtle.forward(this.x);
                    break;
                case '-':
                    this.turtle.right(this.alpha);
                    break;
                case '+':
                    this.turtle.left(this.alpha);
                    break;
                case '[':
                    TurtleState toPush = new TurtleState(this.turtle.getX(), this.turtle.getY(), this.turtle.getDirection());
                    states.push(toPush);
                    break;
                case ']':
                    if (!states.isEmpty()) {
                        TurtleState newState = states.pop();
                        // hide the turtle while moving it back to the previous location
                        this.turtle.up();
                        this.turtle.setPosition(newState.getX(), newState.getY(), newState.getAngle());
                        this.turtle.down();
                    }
                    break;
                default:
                    break;
            }
        }
    }
}
