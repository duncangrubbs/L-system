/**
 * @author Duncan Grubbs
 * @date 2020-01-30
 * @license MIT
 */

import java.util.Stack;

public class LSystemInterpreter {
    private int x;
    private double alpha;
    private Turtle turtle;

    /**
     * Visual Interpreter for strings generated by
     * L-Systems.
     * @param x Amount each F moves Turtle forward
     * @param alpha Angle each + and minus moves turtle
     */
    public LSystemInterpreter(int x, double alpha) {
        this.x = x;
        this.alpha = alpha;

        // create our turtle and set some basic properties
        this.turtle = new Turtle();
        this.turtle.up();
        this.turtle.setPosition(0, -300, 90);
        this.turtle.down();
        this.turtle.speed(0);
        this.turtle.penColor("olivedrab");
    }

    /**
     * Visually interprets a string generated by the L-System
     * by using Turtle graphics to draw a system.
     * @param procedure String to be interpreted.
     */
    public void interpret(String procedure) {
        // create our stack
        Stack<TurtleState> states = new Stack<>();

        // for every character in the string, interpret it
        for (int i = 0; i < procedure.length(); i++) {
            char currChar = procedure.charAt(i);

            // the basic keys for interpreting
            switch (currChar) {
                case 'F':
                    this.turtle.forward(this.x);
                    break;
                case '-':
                    this.turtle.right(this.alpha);
                    break;
                case '+':
                    this.turtle.left(this.alpha);
                    break;
                case '[':
                    TurtleState toPush = new TurtleState(this.turtle.getX(), this.turtle.getY(), this.turtle.getDirection());
                    states.push(toPush);
                    break;
                case ']':
                    if (!states.isEmpty()) {
                        TurtleState newState = states.pop();
                        this.turtle.setPosition(newState.getX(), newState.getY(), newState.getAngle());
                    }
                    break;
                default:
                    break;
            }
        }
    }
}
